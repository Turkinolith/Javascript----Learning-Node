********************
**** Pagination ****
********************
Earlier I used the limit method:

	async function getCourses() {
	  const courses = await Course
		.find({ author: /pattern/ })
		.limit(10)
		.sort({ name: 1 })
		.count();
	  console.log(courses);
	}
	
Another method that goes hand-in-hand with it is the Skip method.
	.skip()

This is used to implement Pagination.


*** How .skip() works ***
First lets define 2 constants, pagenumber and pagesize
These are hardcoded for simplicity but in a real app they would be passed as query string parameters.

	const pageNumber = 2;
	const pageSize = 10
	
In a RESTful app you might have an API endpoint to get the list of courses
	/api/courses
	
And you would be able to query it like this:
	/api/courses?pageNumber=2&pageSize=10

This is how things work in the real world, for now lets not worry about that:

	const pageNumber = 2;
	const pageSize = 10

	async function getCourses() {
	  const courses = await Course
		.find({ author: /pattern/ })
		.limit(10)
		.sort({ name: 1 })
		.count();
	  console.log(courses);
	}

In order to implement pagination we need to escape all of the documents on the previous page.
Here is the formula assuming that page number starts at 1, since arrays are 0 indexed:

	.skip((pageNumber -1) * pageSize)

Then we change the limit to use the pageSize variable
	.limit(pageSize)
	
With this we can get the documents on a given page:

	const pageNumber = 2;
	const pageSize = 10

	async function getCourses() {
	  const courses = await Course
		.find({ author: /pattern/ })
		.skip((pageNumber -1) * pageSize)
		.limit(pageSize)
		.sort({ name: 1 })
		.count();
	  console.log(courses);
	}
