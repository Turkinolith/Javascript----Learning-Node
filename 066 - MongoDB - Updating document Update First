********************************************
**** Updating a Document - Update First ****
********************************************
Updating with a query first is good if you need to validate data before you make an edit.
Sometimes though you know what you are doing and just want to update the data without making a query beforehand.

In such a case, instead of using the findById method use the .update() method.
The first argument is a query or filter object.
	Course.update({ _id: id }); // Can get the course with this ID
Or we can pass something more generic
	Course.update({ isPublished: false }); //This will update any course that has isPublished set to false, multiple documents in one go.

In this case I want to update a course with a particular ID.
The second argument to the update method is the update object. Here use one or more of the MongoDB update operators.
	
Mongo DB Update Operators: (too many for a short list)
	https://docs.mongodb.com/manual/reference/operator/update/

In this case, I'm going to set the value of the author field and the isPublished fields.
	Course.update({ _id: id }, { $set: { author: 'Larry', isPublished: false } });
	
And what we get at the end of this method is the "RESULT" of the operation.
	const result = await Course.update({ _id: id }, { $set: { author: 'Larry', isPublished: false } });
	
So, now I can just show the result.
	const result = await Course.update({ _id: id }, { $set: { author: 'Larry', isPublished: false } });
	console.log(result);


Here is the code:
	async function blindupdateCourse(id) {
	  const result = await Course.update(
		{ _id: id },
		{ $set: { author: "Larry", isPublished: false } }
	  );
	  console.log(result);
	}

And here is the result:
{ n: 1, nModified: 1, ok: 1 }

It means: I modified 1 document.


***********************************************************************************
Getting the updated document back instead of a verification of operation complete 
***********************************************************************************

In this case if I want to return the document instead of the .update() method I can use: findByIdAndUpdate()
In the first argument it passes an ID instead of a query object, for the second it takes the update object.

	async function updateAndReturnCourse(id) {
	  const course = await Course.findByIdAndUpdate(id, {
		$set: {
		  author: "Lisa",
		  isPublished: true
		}
	  });
	  console.log(course);
	}

But there is a catch, by default the returned document is the "ORIGINAL" NOT THE UPDATED ONE.
If I want to return the updated document I need to pass another argument to the method, an object with the new property set to true.

	async function updateAndReturnCourse(id) {
	  const course = await Course.findByIdAndUpdate(id, {
		$set: {
		  author: "Lisa",
		  isPublished: true
		}
	  }, { new: true });
	  console.log(course);
	}

Now I'll get the updated document returned instead of the original.



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CODE SUMMARY:


const mongoose = require("mongoose");

mongoose.set("useNewUrlParser", true);
mongoose.set("useFindAndModify", false);
mongoose.set("useCreateIndex", true);
mongoose.set("useUnifiedTopology", true);
//* the connect method returns a promise.
//* This connection string is hardcoded, but in a real app it should be located in a cfg file.
mongoose
  .connect("mongodb://localhost/mongo-exercises")
  .then(() => console.log("connected to MongoDB..."))
  .catch(err => console.log("Could not connect to MongoDB...", err.message));

const courseSchema = new mongoose.Schema({
  name: String,
  author: String,
  tags: [String],
  price: Number,
  date: { type: Date, default: Date.now },
  isPublished: Boolean
});

//* Generates the Course class
const Course = mongoose.model("Course", courseSchema);

async function getCourses() {
  return await Course.find({ isPublished: true }).or([
    { price: { $gte: 15 } },
    { name: /.*by.*/i }
  ]);
}

async function run() {
  const courses = await getCourses();
  console.log(courses);
}

//* This looks for a single document in the DB that has an objectID set for KeyID then if it exists updates values in it.
async function updateCourse(id) {
  console.log("attempting to search for: ", id);
  const course = await Course.findById(id);
  if (!course) return console.log("Course Not Found"); //If the course doesn't exist, return immediately

  //Update data Method #1
  course.isPublished = true;
  course.author = "Larry Pulling out Hair";

  const result = await course.save();
  console.log(result);
}

//* This looks for a single document in the DB (Note: needs to have an objectID for the keyID in the DB.)
async function checkCourse(id) {
  console.log("attempting to search for:", id);
  const course = await Course.findById(id);
  //if (!course) return console.log("Course Not Found");
  console.log(course);
}

//* This just returns all documents in the DB.
async function checkCourses() {
  const courses = await Course.find();
  if (!courses) return console.log("Course Not Found");
  console.log(courses);
}

//* This blind updates the DB and returns a simple verification of how many documents I've edited.
async function blindupdateCourse(id) {
  const result = await Course.update(
    { _id: id },
    { $set: { author: "Larry", isPublished: false } }
  );
  console.log(result);
}

//* This returns the original document from the DB
async function updateAndReturnOriginalCourse(id) {
  const course = await Course.findByIdAndUpdate(id, {
    $set: {
      author: "Lisa",
      isPublished: true
    }
  });
  console.log(course);
}

//* This returns the updated document from the DB
async function updateAndReturnCourse(id) {
  const course = await Course.findByIdAndUpdate(
    id,
    {
      $set: {
        author: "Ted",
        isPublished: false
      }
    },
    { new: true }
  );
  console.log(course);
}
