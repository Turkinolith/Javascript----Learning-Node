*************************************************
**** Writing Unit Test for generateAuthToken ****
*************************************************
Quick Note: Consult this page for Mongoose specific notes about using JEST: 

https://mongoosejs.com/docs/jest.html

To prevent nasty surprises when testing mongoose apps with JEST, in package.json add these lines:

  "jest": {
    "testEnvironment": "node"
  },


lets build the unit test for the generateAuthToken function in the vidly app.

First install jest
next create a tests folder
	You want to separate the unit tests from integration tests, so make a unit folder next.
create unit folder within tests
	try to mimic the structure of the application for tests
create a models folder within unit.
create a user.test.js file

Now, begin to make the describe block:
	describe("user.generateAuthToken", () => {
		it('should return a valid JWT with the properties _id and isAdmin', () => {

		})
	})

Now, I need to create a user object, so I need to require it on the top. Remember I have to use object destructuring as the module exports 2 properties.
	const { Users } = require('../../../Models/user')

So now I build the rest of the test:

const { Users } = require('../../../Models/user')
const jwt = require("jsonwebtoken");
const config = require("config");

describe("user.generateAuthToken", () => {
    it('should return a valid JWT with the properties _id and isAdmin', () => {
        const user = new Users({ _id: 1, isAdmin: true });
        const token = user.generateAuthToken();
        const decoded = jwt.verify(token, config.get("jwtPrivateKey"))
        expect(decoded).toMatchObject({ _id: 1, isAdmin: true })
    })
})

**** Warning: This code will fail! ****
When you run the test you get this error:
WARNING: NODE_ENV value of 'test' did not match any deployment config file names.

Jest configs node environment to "test"
in the config folder, I don't have a config file for a test environment.

	*** Setting a TEST Config File ***
So, I create a new file: test.json
And there, copy everything in default.

Also, while in the test.json, I should set the private key to a simple value, like "jwtPrivateKey": "1234"
This way I don't have to set an environment-variable on a machine that I want to run the tests.


After running the test I get the following Error:
FAIL  tests/unit/Models/user.test.js
  user.generateAuthToken
    × should return a valid JWT with the properties _id and isAdmin (20ms)

  ● user.generateAuthToken › should return a valid JWT with the properties _id and isAdmin

    expect(received).toMatchObject(expected)

    - Expected  - 1
    + Received  + 1

      Object {
    -   "_id": 1,
    +   "_id": "5e83a8f163c9812da0495efd",
        "isAdmin": true,
      }

       8 |     const token = user.generateAuthToken();
       9 |     const decoded = jwt.verify(token, config.get("jwtPrivateKey"));
    > 10 |     expect(decoded).toMatchObject({ _id: 1, isAdmin: true });
         |                     ^
      11 |   });
      12 | });
      13 | 

So, I expected the object to have the properties: _id: and isAdmin.
The "isAdmin" part was obtained as I expected.
However, what I got for "_id:" did not match. It expected "_id": 1.   It got "_id": "5e83a8f163c9812da0495efd"

Because _id is of type objectID I can't set it to a simple number like "1"

So to set it to a valid objectID I need to load mongoose
	const mongoose = require('mongoose');

Now I can set _id: for the new user to be a new mongoose.Types.ObjectId().

describe("user.generateAuthToken", () => {
  it("should return a valid JWT with the properties _id and isAdmin", () => {
    const user = new Users({ _id: new mongoose.Types.ObjectId(), isAdmin: true });
    const token = user.generateAuthToken();
    const decoded = jwt.verify(token, config.get("jwtPrivateKey"));
    expect(decoded).toMatchObject({ _id: 1, isAdmin: true });
  });
});

But here is the problem, every time I create a new ID, that ID# is going to be different.
So, when making an assertion I need to know the ID of that user object ahead of time.

So, lets extract the object and store it, then initialize the user object with the stored variable.

describe("user.generateAuthToken", () => {
  it("should return a valid JWT with the properties _id and isAdmin", () => {
    const payload = { _id: new mongoose.Types.ObjectId(), isAdmin: true }
    const user = new Users(payload);
    const token = user.generateAuthToken();
    const decoded = jwt.verify(token, config.get("jwtPrivateKey"));
    expect(decoded).toMatchObject({ _id: 1, isAdmin: true });
  });
});

Finally, I can ensure that the decoded JWT matches the payload like this:

describe("user.generateAuthToken", () => {
  it("should return a valid JWT with the properties _id and isAdmin", () => {
    const payload = { _id: new mongoose.Types.ObjectId(), isAdmin: true }
    const user = new Users(payload);
    const token = user.generateAuthToken();
    const decoded = jwt.verify(token, config.get("jwtPrivateKey"));
    expect(decoded).toMatchObject(payload);
  });
});


Now, this again returns an error:
 FAIL  tests/unit/Models/user.test.js
  user.generateAuthToken
    × should return a valid JWT with the properties _id and isAdmin (19ms)

  ● user.generateAuthToken › should return a valid JWT with the properties _id and isAdmin

    expect(received).toMatchObject(expected)

    Compared values serialize to the same structure.
    Printing internal object structure without calling `toJSON` instead.

    - Expected  - 17
    + Received  +  1

      Object {
    -   "_id": ObjectID {
    -     "_bsontype": "ObjectID",
    -     "id": Buffer [
    -       94,
    -       131,
    -       173,
    -       244,
    -       178,
    -       130,
    -       96,
    -       79,
    -       204,
    -       76,
    -       72,
    -       253,
    -     ],
    -   },
    +   "_id": "5e83adf4b282604fcc4c48fd",
        "isAdmin": true,
      }

      10 |     const token = user.generateAuthToken();
      11 |     const decoded = jwt.verify(token, config.get("jwtPrivateKey"));
    > 12 |     expect(decoded).toMatchObject(payload);
         |                     ^
      13 |   });
      14 | });
      15 |

      at Object.<anonymous> (tests/unit/Models/user.test.js:12:21)

So, what we have here is the Object section is what I expected. _id is an objectID and the "id": Buffer [ section is how it is internally represented using an array of numbers.

What we recieved is a string representation of the ObjectID. Because when we call generateAuthToken the JWT library will convert the ObjectId into a hexadecimal string to store it
in the payload of the token.

The test failed because in the JWT we have ID as a string but in the payload object we have the ID as a real object ID.
So, we have to add .toHexString() on the payload line to read:
	const payload = { _id: new mongoose.Types.ObjectId().toHexString(), isAdmin: true };


Now the test passes!

Final code for this test:

	const { Users } = require("../../../Models/user");
	const jwt = require("jsonwebtoken");
	const config = require("config");
	const mongoose = require("mongoose");

	describe("user.generateAuthToken", () => {
	  it("should return a valid JWT with the properties _id and isAdmin", () => {
		const payload = {
		  _id: new mongoose.Types.ObjectId().toHexString(),
		  isAdmin: true
		};
		const user = new Users(payload);
		const token = user.generateAuthToken();
		const decoded = jwt.verify(token, config.get("jwtPrivateKey"));
		expect(decoded).toMatchObject(payload);
	  });
	});
