**************************************************
**** Using Lodash and joi-password-complexity ****
**************************************************

For returning the user sans password I can do things in 2 ways.

#1 
after user.save(), instead of res.send(user); I make a new object and respond with that.

	res.send({
	  name: user.name,
	  email: user.email
	});

#2
I can use the lodash package to allow me to handle this in a different way.
after importing the package as "_" I use the pick method it provides.
The pick method takes an object as its first argument, then it takes an array of properties that it will look for.
It then searches inside of the first object for those properties and returns an object composed of just those properties.

	_.pick(user, ['_id', 'name', 'email']);
So, when I call the above function it checks in the "user" object for properties _id, name, and email, then returns an object that has just those.

And now I can put that function inside of the res.send command.

	res.send(_.pick(user, ['_id', 'name', 'email']));
	

*** OTHER USES ****
Other uses for the lodash "Pick" method is to get rid of some of the dot notation going on.
IE:
	    user = new Users({
		  name: req.body.name,
		  email: req.body.email,
		  password: req.body.password
		});

can be replaced with:
	user = new Users( _.pick(req.body, ["name", "email", "password"]));

This is good because a malicious actor could try to send in a malformed request body, this ensures that regardless of the data in it only the fields I want are picked out and processed.



*** Password Complexity Enforcement ***
So far I've been using really simple passwords. I can enforce stricter requirements however.

https://www.npmjs.com/package/joi-password-complexity

Here is a working example of how to use it from my user.js

`````````````````````````````````````````````````````````````````````````````````````````````````
const mongoose = require("mongoose");
const Joi = require("@hapi/joi");
const passwordComplexity = require("joi-password-complexity");

// * ----------  PRE VALIDATE CUSTOMER NAME and PHONE NUMBER ----------
function validateUser(user) {
  const complexityOptions = {
    min: 7,
    max: 30,
    lowerCase: 1,
    upperCase: 1,
    numeric: 1,
    symbol: 2,
    requirementCount: 4
  };
  /*
		Min & Max not considered in the count. 
		Only lower, upper, numeric and symbol. 
		requirementCount could be from 1 to 4 
		If requirementCount=0, then it takes count as 4
    */

  const schema = Joi.object({
    name: Joi.string()
      .min(2)
      .max(30)
      .trim()
      .required(),
    email: Joi.string()
      .email()
      .trim()
      .required()
      .max(255),
    password: passwordComplexity(complexityOptions)
  });

  return schema.validate(user);
}

````````````````````````````````````````````````````````````````````````````````````````````````

If I try to pass a POST to the API lacking the password field:
	{ "name": "Larry", "email": "turkinolith@joi2test.com" }
I return: 
	User validation failed: password: Path `password` is required.

If I send with an empty string:
	{ "name": "Larry", "email": "turkinolith@newjoi1.com", "password": "" }
Returns:
	"password" is not allowed to be empty

If I send:
	{ "name": "Larry", "email": "turkinolith@newjoi1.com", "password": "1" }
Returns:
	"password" should be at least 7 characters long

etc.


The new API endpoint is in good shape, but I'm storing passwords as plain text and this is very VERY bad. So next lesson will be how to hash passwords.
