***************************
**** Hashing Passwords ****
***************************
https://www.npmjs.com/package/bcrypt


For this I'm using the bcrypt package. *NOTE: This package has had a lot of updates, I'm on v4.0.1 and Instructor is on v 1.0.3. I also know there were a lot of people complaining about 
problems with this package before.

First I'll use a playground file for learning to use it, then I'll take the code and put it in the route for hashing the passwords for new users.

First load bcrypt, it returns an object so I store it in a constant.

In order to hash a password first I need a "Salt"

What is a salt? 
Imagine the password is "1234". When we hash it lets imagine that we get the string "abcd"
This hashing algorithm is one way. If we have "abcd" we can not decrypt this and get "1234"

From a security point of view, this is great. If a hacker gets the salted passwords he can't just decrypt them into their passwords.
HOWEVER the hacker could compile a list of popular passwords and hash those, then look at the database and look for those hashed strings and know that "abcd" represents "1234"
This is why we need a salt!

A salt is a random string that is added before or after the password so that the resulting hashed password will be different each time based on the salt that is used. 

-------------------------------------
**** GENERATING A SALT IN BCRYPT ****
-------------------------------------

	bcrypt.genSalt 
	*note, there are 2 versions of this method. one that is synchronous, and the default one that is async.*
		**Remember, as best-practice use the async.
		
The parameter that goes into this method is the number or rounds that you want to run the algorithm to generate the Salt. The higher the number, the longer it will take to generate but 
also the more complex the Salt. The default value is 10.
	
	bcrypt.genSalt(10);
	
Because this is an async method I can either pass a callback after the round number or I can use it as a promise.
	#1 - bcrypt.genSalt(10, callback () => ... );
	#2 - const salt = await bcrypt.genSalt(10);
	
Using the promise version, wrap it within an async function like run()

	async function run() {
		const salt = await bcrypt.genSalt(10);
		console.log(salt);
	}
	run();


Here is the example of a salt:
	$2b$15$IrDpXwIUb5MR8zSRlYiOIO
	
you can see the type of hash in the first 4 characters: $2b$
how many hash cycles are the next 2 after that: 15

Now that I have a salt, I can hash the password. Remember every time I hash the password with a different salt I get a different result.

----------------------------------------
**** HASHING A PASSWORD WITH A SALT ****
----------------------------------------
There is another method on the bcrypt object: .hash(<data>, <salt>, <callback>). I don't have to use the callback, instead I'll use the promise it returns.

	const hashed = await bcrypt.hash('1234', salt);


Now my code looks like this:

	const bcrypt = require("bcrypt");

	async function run() {
	  const salt = await bcrypt.genSalt(11);
	  const hashed = await bcrypt.hash("1234", salt);
	  console.log(salt);
	  console.log(hashed);
	}
	run();

**NOTE: After running it a few times I saw a NOTICEABLE increase in time to complete after salt level 12, I'll end up leaving it at 11.

And here is one set of return:
	$2b$11$T5o5l08TImS9.iblqQoElu
	$2b$11$T5o5l08TImS9.iblqQoEluwOgMdkfwZZsCtCLJa6.BAb.eSKYxhrq
On the first line you see the salt.
On the result you see the salt is included at the start of the hashed password.

The reason this is included is because later when you want to authenticate the user we want to validate the username and password.
So, the user sends their password in plain-text, we need to hash it again, but we need to have the original salt that was used to hash the password.
During comparing the plaintext password with the hashed bcrypt needs to know the original salt used to hash the password.

----------------------------------------
Now, to use bcrypt in the route handler.
----------------------------------------

Lets take the 2 lines defining the salt and the hash and put them in the POST.

	router.post("/", async (req, res) => {
	  const { error } = validateUser(req.body);
	  if (error) return res.status(400).send(error.details[0].message);

	  // Make sure the email address is not already used.
	  let user = await Users.findOne({ email: req.body.email });
	  if (user) return res.status(400).send("User already registered.");

	  try {
		// Using lodash to ensure that only the name email and password fields are processed.
		user = new Users(_.pick(req.body, ["name", "email", "password"]));
		const salt = await bcrypt.genSalt(11);
		const hashed = await bcrypt.hash("1234", salt);
		
		await user.save();

		// Using lodash again to return the saved user object, minus the password.
		res.send(_.pick(user, ["_id", "name", "email"]));
	  } catch (ex) {
		res.status(500).send(ex.message);
	  }
	});

I don't want to pass "1234" as the user password, instead lets call user.password since we defined that by parsing the JSON for the password field in the line above.
	const hashed = await bcrypt.hash(user.password, salt);

Now, lets replace user.password with the newly hashed version all in the same line. 
Remember, everything to the right happens first, then gets assigned to the left.
	user.password = await bcrypt.hash(user.password, salt);


I submit this JSON String:
	{ "name": "Larry", "email": "turkinolith@bcrypttest.com", "password": "123456aA!@" }

And in the DB:
$2b$11$7qHdKJ97bhh7rd8Czh5yR.DBH9hsasWi7zmI7f1UGYKD/qgNq3DEq


POST method of users.js:
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
router.post("/", async (req, res) => {
  const { error } = validateUser(req.body);
  if (error) return res.status(400).send(error.details[0].message);

  // Make sure the email address is not already used.
  let user = await Users.findOne({ email: req.body.email });
  if (user) return res.status(400).send("User already registered.");

  try {
    // Using lodash to ensure that only the name email and password fields are processed.
    user = new Users(_.pick(req.body, ["name", "email", "password"]));
    const salt = await bcrypt.genSalt(11);
    user.password = await bcrypt.hash(user.password, salt);

    await user.save();

    // Using lodash again to return the saved user object, minus the password.
    res.send(_.pick(user, ["_id", "name", "email"]));
  } catch (ex) {
    res.status(500).send(ex.message);
  }
});

