***********************************
**** Mongoose Async Validators ****
***********************************
Sometimes validation logic means reading something from a DB or a remote HTTP service, in this case we need an Async validator.

How to convert a synchronous validator into an async one.

#1	- Set isAsync: property to the validate object to true. 

	tags: {
	  isAsync: true,
	  type: Array,
	  validate: { 
	    validator: function (v) {
	    return v && v.length > 0;
	  },
	  message: "A course should have at least one tag."
	 }
	}

#2	- Change the signature of the validate function and add a 2nd argument, a callback function.

	tags: {
	  isAsync: true,
	  type: Array,
	  validate: { 
	    validator: function (v, callback) {
	    // Do some async work
		callback()
	    return v && v.length > 0;
	  },
	  message: "A course should have at least one tag."
	 }
	}

#3	- To simulate async work I'll use the setTimeout function.
		Inside this function is where I'll do the async work, at some point I'm going to get the result of that work. 
		So I'll set the result to the same logic that it was originally using. In the real world that result would be calculated
		based on the data I get from the file system, the remote service, whatever.
		Finally, I call the callback function with the result.
		
	tags: {
	  isAsync: true,
	  type: Array,
	  validate: { 
	    validator: function (v, callback) {
	    setTimeout(() => {
		
	      // Do some async work
		  const result = v && v.length > 0;
		  callback( result );
		  
		}, 2000);
	    
	  },
	  message: "A course should have at least one tag."
	 }
	}

This is how an async validator is implemented.

SUMMARY:
All you need to do is set the async property and in the function of the validate object pass a callback function.
