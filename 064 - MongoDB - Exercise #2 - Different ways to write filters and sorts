*********************
**** Exercise #2 ****
*********************

Get all the published frontend and backend courses,
sort them by price in "descending" order,
pick only their name and author,
display them.

/////////////////////////////////////////////
My Solution
/////////////////////////////////////////////
const mongoose = require("mongoose");

mongoose.set("useNewUrlParser", true);
mongoose.set("useFindAndModify", false);
mongoose.set("useCreateIndex", true);
mongoose.set("useUnifiedTopology", true);
//* the connect method returns a promise.
//* This connection string is hardcoded, but in a real app it should be located in a cfg file.
mongoose
  .connect("mongodb://localhost/mongo-exercises")
  .then(() => console.log("connected to MongoDB..."))
  .catch(err => console.log("Could not connect to MongoDB...", err.message));

const courseSchema = new mongoose.Schema({
  name: String,
  author: String,
  tags: [String],
  price: Number,
  date: { type: Date, default: Date.now },
  isPublished: Boolean
});

//* Generates the Course class
const Course = mongoose.model("Course", courseSchema);

async function getPublishedCourses() {
  const courses = await Course.find()
    .or([
      { isPublished: true, tags: "backend" },
      { isPublished: true, tags: "frontend" }
    ])
    .sort({ price: -1 })
    .select({ name: 1, author: 1, price: 1 });
  console.log(courses);
}

getPublishedCourses();


///////////////////////////////////////////////
Instructors solution #1
///////////////////////////////////////////////

const mongoose = require("mongoose");

mongoose.set("useNewUrlParser", true);
mongoose.set("useFindAndModify", false);
mongoose.set("useCreateIndex", true);
mongoose.set("useUnifiedTopology", true);
//* the connect method returns a promise.
//* This connection string is hardcoded, but in a real app it should be located in a cfg file.
mongoose
  .connect("mongodb://localhost/mongo-exercises")
  .then(() => console.log("connected to MongoDB..."))
  .catch(err => console.log("Could not connect to MongoDB...", err.message));

const courseSchema = new mongoose.Schema({
  name: String,
  author: String,
  tags: [String],
  price: Number,
  date: { type: Date, default: Date.now },
  isPublished: Boolean
});

//* Generates the Course class
const Course = mongoose.model("Course", courseSchema);

async function getCourses() {
  return await Course.find({
    isPublished: true,
    tags: { $in: ["frontend", "backend"] }
  })
    .sort("-price") // using an object instead of a string works too: { price: -1 }
    .select("name author");
}

async function run() {
  const courses = await getCourses();
  console.log(courses);
}

run();

//////////////////////////////////////////////
Instructors Solution #2 - using OR
//////////////////////////////////////////////
const mongoose = require("mongoose");

mongoose.set("useNewUrlParser", true);
mongoose.set("useFindAndModify", false);
mongoose.set("useCreateIndex", true);
mongoose.set("useUnifiedTopology", true);
//* the connect method returns a promise.
//* This connection string is hardcoded, but in a real app it should be located in a cfg file.
mongoose
  .connect("mongodb://localhost/mongo-exercises")
  .then(() => console.log("connected to MongoDB..."))
  .catch(err => console.log("Could not connect to MongoDB...", err.message));

const courseSchema = new mongoose.Schema({
  name: String,
  author: String,
  tags: [String],
  price: Number,
  date: { type: Date, default: Date.now },
  isPublished: Boolean
});

//* Generates the Course class
const Course = mongoose.model("Course", courseSchema);

async function getCourses() {
  return await Course.find({ isPublished: true })
    .or([{ tags: "frontend" }, { tags: "backend" }])
    .sort("-price") // using an object instead of a string works too: { price: -1 }
    .select("name author price");
}

async function run() {
  const courses = await getCourses();
  console.log(courses);
}

run();
