*****************************
**** ObjectID in MongoDB ****
*****************************

MongoDB auto sets the value of the _id property to a 24 character ID string.
Every 2 characters represents a byte, so 12 bytes
first 4 bytes = timestamp when the document is created.
With those 4 bytes you don't have to make a separate "created at" since the timestamp is included in the objectID.
If you want to sort documents by creation time you can also sort them by the _id property.

_id: 5e5eb682c47da221b4eb1532
24 characters long, every 2 characters is a byte, 12 bytes total.

12 bytes -
/4 bytes: timestamp  _id: [5e5eb682]c47da221b4eb1532
/3 bytes: machine identifier, so different machine, different identifier.   _id: 5e5eb682[c47da2]21b4eb1532
/2 bytes: process identifier. so if I generate 2 objects on same machine but in different processes these bytes will be different.  _id: 5e5eb682c47da2[21b4]eb1532
/3 bytes: counter. if I'm generating 2 different documents at the same time, on the same machine, using the same process, the counter bytes will be different. _id: 5e5eb682c47da221b4[eb1532]

This usually makes a unique document ID
HOWEVER: there is a very very very low chance you can still get 2 documents with the same identifier.
	In 1 byte there are 8 bits. In each bit there is 0 or 1, so how many numbers can be represented? 2^8, or 256
	The 3 byte counter can store 2^24 or 16M numbers.
	So, if its at the same timestamp, on the same machine, using the same process, and the counter is over 16M documents, the counter will overflow and thats where we can get 2 documents with the same objectID.
	Very unlikely for most applications, but not 100% chance of being unique.
	
The id is actually generated by the mongoDB driver. this allows it to scale quickly as you don't have to wait for the DB itself to generate an ID, the driver does it for us.
SQL databases have a counter that guarantees uniqueness by always increasing a table defined counter by +1, but it means the DB has to specify the ID for each entry on its own.

In MongoDB I can also explicitly generate an ID value if I want to.
	const mongoose = require('mongoose');
	const id = new mongoose.Types.ObjectId();
	console.log(id);

//returns:
	5a736f30a2e97a9bd9c29ffe
	
See, it returns an identifier and I didn't save anything to the database. It's generated in memory.


	*** Extracting the timestamp out of a MongoDB _id ***
	
Remember, the first 4 bytes of an _id represent a timestamp.

To get the value of that extracted call the getTimestamp() method on a mongoose object.
	console.log(id.getTimestamp());

5a736f30a2e97a9bd9c29ffe
//returns:
	2018-02-01T19:49:55.000Z

You can also do this from the mongo shell!

5e6000f5886a5d5a749bb188.getTimestamp()
// returns:
	2020-03-08T17:42:44.776-0600


	*** Validating a mongDB objectID ***
There is a static method on the mongoose.types.ObjectId class for validating ID's.

	mongoose.Types.ObjectId.isValid() - takes a string, number, or objectId, checks if value is a valid bson.
	
Example:
	const isValid = mongoose.Types.ObjectId.isValid('1234')
	console.log(isValid);
// returns:
	false
