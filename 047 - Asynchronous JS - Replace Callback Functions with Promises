*****************************************
**** Replace Callbacks with Promises ****
*****************************************
Here is the original function:

	function getUser(id, callback) {
	  setTimeout(() => {
		console.log("Reading a user from a database...");
		callback({ id: id, gitHubUsername: "mosh" });
	  }, 2000);
	}

1- have it generate a new promise
	function getUser(id, callback) {
	  return new Promise((res, rej) => {
		
	  })
	  setTimeout(() => {
		console.log("Reading a user from a database...");
		callback({ id: id, gitHubUsername: "mosh" });
	  }, 2000);
	}

2- Next, move into the primise code block the async function.

	function getUser(id, callback) {
	  return new Promise((res, rej) => {
		setTimeout(() => {
		  console.log("Reading a user from a database...");
		  callback({ id: id, gitHubUsername: "mosh" });
		}, 2000);
	  });

	}
	
3- Next, remove the callback from the original function arguments and replace the code block callback with the result to return.

	function getUser(id) {
	  return new Promise((res, rej) => {
		setTimeout(() => {
		  console.log("Reading a user from a database...");
		  res({ id: id, gitHubUsername: "mosh" });
		}, 2000);
	  });
	}

///////////////////////////////////////
// Here is the original code
///////////////////////////////////////

console.log('Before');
getUser(1, (user) => {
  getRepositories(user.gitHubUsername, (repos) => {
    getCommits(repos[0], (commits) => {
      console.log(commits);
    })
  })
});
console.log('After');

function getUser(id, callback) {
  setTimeout(() => {
    console.log('Reading a user from a database...');
    callback({ id: id, gitHubUsername: 'mosh' });
  }, 2000);
}

function getRepositories(username, callback) {
  setTimeout(() => {
    console.log('Calling GitHub API...');
    callback(['repo1', 'repo2', 'repo3']);
  }, 2000);
}

function getCommits(repo, callback) {
  setTimeout(() => {
    console.log('Calling GitHub API...');
    callback(['commit']);
  }, 2000);
}

//////////////////////////////////////////////
// And here is the code revised into promises
//////////////////////////////////////////////

console.log("Before");
getUser(1, user => {
  getRepositories(user.gitHubUsername, repos => {
    getCommits(repos[0], commits => {
      console.log(commits);
    });
  });
});
console.log("After");

function getUser(id) {
  return new Promise((res, rej) => {
    setTimeout(() => {
      console.log("Reading a user from a database...");
      res({ id: id, gitHubUsername: "mosh" });
    }, 2000);
  });
}

function getRepositories(username) {
  return new Promise((res, rej) => {
    setTimeout(() => {
      console.log("Calling GitHub API...");
      res(["repo1", "repo2", "repo3"]);
    }, 2000);
  });
}

function getCommits(repo) {
  return new Promise((res, rej) => {
    setTimeout(() => {
      console.log("Calling GitHub API...");
      res(["commit"]);
    }, 2000);
  });
}
